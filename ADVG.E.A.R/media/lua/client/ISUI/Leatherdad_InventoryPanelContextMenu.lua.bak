--triggerEvent("OnFillInventoryObjectContextMenu", player, context, items);

function Leatherdad_WeaponAttachments(player, context, items)

 if getCore():getGameMode() == "Tutorial" then
        Tutorial1.createInventoryContextMenu(player, isInPlayerInventory, items ,x ,y);
        return;
    end
    if ISInventoryPaneContextMenu.dontCreateMenu then return; end

	-- if the game is paused, we don't show the item context menu
	if UIManager.getSpeedControls():getCurrentGameSpeed() == 0 then
		return;
	end

    local c = 0;

	local isWeapon = nil;
	local isHandWeapon = nil;


    local playerObj = getSpecificPlayer(player)

	ISInventoryPaneContextMenu.removeToolTip();

	getCell():setDrag(nil, player);

    for _,tooltip in ipairs(ISInventoryPaneContextMenu.tooltipsUsed) do
        table.insert(ISInventoryPaneContextMenu.tooltipPool, tooltip);
    end
--    print('reused ',#ISInventoryPaneContextMenu.tooltipsUsed,' inventory tooltips')
    table.wipe(ISInventoryPaneContextMenu.tooltipsUsed);

    local containerList = ISInventoryPaneContextMenu.getContainers(playerObj)
    local testItem = nil;
    local editItem = nil;
    for i,v in ipairs(items) do
        testItem = v;
        if not instanceof(v, "InventoryItem") then
            --print(#v.items);
            if #v.items == 2 then
                editItem = v.items[1];
            end
            testItem = v.items[1];
        else
            editItem = v
        end
        -- if instanceof(testItem, "Key") or testItem:getType() == "KeyRing" then
            -- canBeRenamed = testItem;
        -- end
        -- if testItem:getClothingItemExtraOption() then
            -- clothingItemExtra = testItem;
        -- end
		-- if not testItem:isCanBandage() then
			-- isAllBandage = false;
		-- end
        -- if testItem:getCategory() ~= "Food" then
            -- isAllFood = false;
        -- end
		-- if testItem:getCategory() == "Clothing" then
            -- clothing = testItem;
        -- end
		-- if testItem:getType() == "DishCloth" or testItem:getType() == "BathTowel" and playerObj:getBodyDamage():getWetness() > 0 then
			-- canBeDry = true;
        -- end
        -- if testItem:isHairDye() then
            -- hairDye = testItem;
        -- end
        -- if testItem:getMakeUpType() then
            -- makeup = testItem;
        -- end
        if testItem:isBroken() or testItem:getCondition() < testItem:getConditionMax() then
            brokenObject = testItem;
        end
        -- if instanceof(testItem, "DrainableComboItem") then
            -- drainable = testItem;
        -- end
        -- if testItem:getContainer() and testItem:getContainer():isInCharacterInventory(playerObj) then
            -- inPlayerInv = testItem;
        -- end
        -- if testItem:getMaxAmmo() > 0 and not instanceof(testItem, "HandWeapon") then
            -- magazine = testItem;
        -- end
        -- if testItem:getDisplayCategory() == "Ammo" then
            -- bullet = testItem;
        -- end
        -- if playerObj:isEquipped(testItem) then
			-- unequip = testItem;
        -- end
        -- if ISInventoryPaneContextMenu.startWith(testItem:getType(), "CarBattery") and testItem:getType() ~= "CarBatteryCharger" then
            -- carBattery = testItem;
        -- end
        -- if testItem:getType() == "CarBatteryCharger" then
            -- carBatteryCharger = testItem;
        -- end
        -- if testItem:getMap() then
            -- map = testItem;
        -- end
		-- if testItem:getCategory() ~= "Literature" or testItem:canBeWrite() then
            -- isAllLiterature = false;
        -- end
        -- if testItem:getCategory() == "Literature" and testItem:canBeWrite() then
            -- canBeWrite = testItem;
        -- end
		-- if testItem:canBeActivated() and (playerObj:isHandItem(testItem) or playerObj:isAttachedItem(testItem)) then
            -- canBeActivated = testItem;
        -- end
		-- all items can be equiped
		if (instanceof(testItem, "HandWeapon") and testItem:getCondition() > 0) or (instanceof(testItem, "InventoryItem") and not instanceof(testItem, "HandWeapon")) then
            isWeapon = testItem;
        end
        if instanceof(testItem, "HandWeapon") then
            isHandWeapon = testItem
        end
        -- remote controller
        -- if testItem:isRemoteController() then
            -- remoteController = testItem;
        -- end
        -- if isHandWeapon and isHandWeapon:canBeRemote() then
            -- remoteControllable = isHandWeapon;
        -- end
		-- if instanceof(testItem, "InventoryContainer") and testItem:canBeEquipped() == "Back" and not playerObj:isEquippedClothing(testItem) then
			-- canBeEquippedBack = testItem;
        -- end
        -- if instanceof(testItem, "InventoryContainer") then
            -- canBeRenamed = testItem;
        -- end
        -- if testItem:getType() == "Generator" then
            -- generator = testItem;
        -- end
        -- if testItem:getType() == "CorpseMale" or testItem:getType() == "CorpseFemale" then
            -- corpse = testItem;
        -- end
        -- if instanceof(testItem, "AlarmClock") or instanceof(testItem, "AlarmClockClothing") then
            -- alarmClock = testItem;
        -- end
        -- if instanceof(testItem, "Food")  then -- Check if it's a recipe from the evolved recipe and have at least 3 ingredient, so we can name them
            -- for i=0,getEvolvedRecipes():size()-1 do
                -- local evoRecipeTest = getEvolvedRecipes():get(i);
                -- if evoRecipeTest:isResultItem(testItem) and testItem:haveExtraItems() and testItem:getExtraItems():size() >= 3 then
                    -- canBeRenamedFood = testItem;
                -- end
            -- end
        -- end
		-- if testItem:isTwoHandWeapon() and testItem:getCondition() > 0 then
			-- twoHandsItem = testItem;
        -- end
        -- if testItem:isRequiresEquippedBothHands() and testItem:getCondition() > 0 then
            -- force2Hands = testItem;
        -- end
        -- --> Stormy
		-- if(not getCore():isNewReloading() and ReloadUtil:isReloadable(testItem, playerObj)) then
			-- isReloadable = true;
        -- end
		-- -->> Stormy
		-- if not ISInventoryPaneContextMenu.startWith(testItem:getType(), "Pills") then
            -- isAllPills = false;
        -- end
        -- if testItem:isWaterSource() then
            -- waterContainer = testItem;
        -- end
        -- if not instanceof(testItem, "Literature") and ISInventoryPaneContextMenu.canReplaceStoreWater(testItem) then
            -- pourOnGround = testItem
        -- end
        -- -- if item is not a clothing, use ClothingRecipesDefinitions
        -- if not playerObj:isEquippedClothing(testItem) and (ClothingRecipesDefinitions[testItem:getType()] or (testItem:getFabricType() and instanceof(testItem, "Clothing"))) then
            -- clothingRecipe = testItem;
        -- end
        -- evorecipe = RecipeManager.getEvolvedRecipe(testItem, playerObj, containerList, true);
        -- if evorecipe then
            -- baseItem = testItem;
        -- end
        --itemsCraft[c + 1] = testItem;

        c = c + 1;
        -- you can equip only 1 weapon
        if c > 1 then
            --~ 			isWeapon = false;
            isHandWeapon = nil
            isAllLiterature = false;
            canBeActivated = nil;
            isReloadable = false;
            unequip = nil;
            canBeEquippedBack = nil;
            brokenObject = nil;
        end
    end

    --triggerEvent("OnPreFillInventoryObjectContextMenu", player, context, items);

    context.blinkOption = ISInventoryPaneContextMenu.blinkOption;

    -- if editItem and c == 1 and ((isClient() and playerObj:getAccessLevel() ~= "None" and playerObj:getAccessLevel() ~= "Observer") and playerObj:getInventory():contains(editItem, true) or isDebugEnabled()) then
        -- context:addOption(getText("ContextMenu_EditItem"), items, ISInventoryPaneContextMenu.onEditItem, playerObj, testItem);
    -- end

    -- -- check the recipe
    -- if #itemsCraft > 0 then
        -- local sameType = true
        -- for i=2,#itemsCraft do
            -- if itemsCraft[i]:getFullType() ~= itemsCraft[1]:getFullType() then
                -- sameType = false
                -- break
            -- end
        -- end
        -- if sameType then
            -- recipe = RecipeManager.getUniqueRecipeItems(itemsCraft[1], playerObj, containerList);
        -- end
    -- end


    if c == 0 then
        return;
    end
    -- local loot = getPlayerLoot(player);
--~ 	context:addOption("Information", items, ISInventoryPaneContextMenu.onInformationItems);
	-- if not isInPlayerInventory then
        -- ISInventoryPaneContextMenu.doGrabMenu(context, items, player);
    -- end
    -- if evorecipe then
        -- ISInventoryPaneContextMenu.doEvorecipeMenu(context, items, player, evorecipe, baseItem, containerList);
    -- end
    
    -- if(isInPlayerInventory and loot.inventory ~= nil and loot.inventory:getType() ~= "floor" ) and playerObj:getJoypadBind() == -1 then
        -- if ISInventoryPaneContextMenu.isAnyAllowed(loot.inventory, items) and not ISInventoryPaneContextMenu.isAllFav(items) then
            -- local label = loot.title and getText("ContextMenu_PutInContainer", loot.title) or getText("ContextMenu_Put_in_Container")
            -- context:addOption(label, items, ISInventoryPaneContextMenu.onPutItems, player);
        -- end
    -- end

    -- Move To
    -- local moveItems = ISInventoryPane.getActualItems(items)
    -- if #moveItems > 0 and playerObj:getJoypadBind() ~= -1 then
        -- local subMenu = nil
        -- local moveTo0 = ISInventoryPaneContextMenu.canUnpack(moveItems, player)
        -- local moveTo1 = ISInventoryPaneContextMenu.canMoveTo(moveItems, playerObj:getClothingItem_Back(), player)
        -- local moveTo2 = ISInventoryPaneContextMenu.canMoveTo(moveItems, playerObj:getPrimaryHandItem(), player)
        -- local moveTo3 = ISInventoryPaneContextMenu.canMoveTo(moveItems, playerObj:getSecondaryHandItem(), player)
        -- local moveTo4 = ISInventoryPaneContextMenu.canMoveTo(moveItems, ISInventoryPage.floorContainer[player+1], player)
        -- local keyRings = {}
        -- local inventoryItems = playerObj:getInventory():getItems()
        -- for i=1,inventoryItems:size() do
            -- local item = inventoryItems:get(i-1)
            -- if item:getType() == "KeyRing" and ISInventoryPaneContextMenu.canMoveTo(moveItems, item, player) then
                -- table.insert(keyRings, item)
            -- end
        -- end
        -- local putIn = isInPlayerInventory and
                        -- loot.inventory and loot.inventory:getType() ~= "floor" and
                        -- ISInventoryPaneContextMenu.isAnyAllowed(loot.inventory, items) and
                        -- not ISInventoryPaneContextMenu.isAllFav(moveItems)
        -- if moveTo0 or moveTo1 or moveTo2 or moveTo3 or moveTo4 or (#keyRings > 0) or putIn then
            -- local option = context:addOption(getText("ContextMenu_Move_To"))
            -- local subMenu = context:getNew(context)
            -- context:addSubMenu(option, subMenu)
            -- if moveTo0 then
                -- subMenu:addOption(getText("ContextMenu_MoveToInventory"), moveItems, ISInventoryPaneContextMenu.onMoveItemsTo, playerObj:getInventory(), player)
            -- end
            -- if moveTo1 then
                -- subMenu:addOption(moveTo1:getName(), moveItems, ISInventoryPaneContextMenu.onMoveItemsTo, moveTo1:getInventory(), player)
            -- end
            -- if moveTo2 then
                -- subMenu:addOption(moveTo2:getName(), moveItems, ISInventoryPaneContextMenu.onMoveItemsTo, moveTo2:getInventory(), player)
            -- end
            -- if moveTo3 then
                -- subMenu:addOption(moveTo3:getName(), moveItems, ISInventoryPaneContextMenu.onMoveItemsTo, moveTo3:getInventory(), player)
            -- end
            -- for _,moveTo in ipairs(keyRings) do
                -- subMenu:addOption(moveTo:getName(), moveItems, ISInventoryPaneContextMenu.onMoveItemsTo, moveTo:getInventory(), player)
            -- end
            -- if putIn then
                -- subMenu:addOption(getText("ContextMenu_MoveToContainer"), moveItems, ISInventoryPaneContextMenu.onPutItems, player)
            -- end
            -- if moveTo4 then
                -- subMenu:addOption(getText("ContextMenu_Floor"), moveItems, ISInventoryPaneContextMenu.onMoveItemsTo, moveTo4, player)
            -- end
        -- end

        -- if isInPlayerInventory then
            -- context:addOption(getText("IGUI_invpage_Transfer_all"), getPlayerInventory(player), ISInventoryPage.transferAll)
        -- else
            -- context:addOption(getText("IGUI_invpage_Loot_all"), loot, ISInventoryPage.lootAll)
        -- end
    -- end

    -- if #moveItems and playerObj:getJoypadBind() == -1 then
        -- if ISInventoryPaneContextMenu.canUnpack(moveItems, player) then
            -- context:addOption(getText("ContextMenu_Unpack"), moveItems, ISInventoryPaneContextMenu.onMoveItemsTo, playerObj:getInventory(), player)
        -- end
    -- end

    -- if inPlayerInv then
       -- if inPlayerInv:isFavorite() then
           -- context:addOption(getText("ContextMenu_Unfavorite"), moveItems, ISInventoryPaneContextMenu.onFavorite, inPlayerInv, false)
       -- else
           -- context:addOption(getText("IGUI_CraftUI_Favorite"), moveItems, ISInventoryPaneContextMenu.onFavorite, inPlayerInv, true)
       -- end
    -- end

    -- if not inPlayerInv and playerObj:getJoypadBind() ~= -1 then
        -- ISInventoryPaneContextMenu.doStoveMenu(context, player)
        -- ISInventoryPaneContextMenu.doTrashCanMenu(context, player)
    -- end






    -- weapon upgrades
    isWeapon = isHandWeapon -- to allow upgrading broken weapons
    if isWeapon and instanceof(isWeapon, "HandWeapon") and getSpecificPlayer(player):getInventory():getItemFromType("Multitool")
	and not getSpecificPlayer(player):getInventory():getItemFromType("Screwdriver")
	then
		--print("Leatherdad Test 1")
        -- add parts
        local weaponParts = getSpecificPlayer(player):getInventory():getItemsFromCategory("WeaponPart");
        if weaponParts and not weaponParts:isEmpty() then
			--print("Leatherdad Test 2")
            local subMenuUp = context:getNew(context);
            local doIt = false;
            local addOption = false;
            local alreadyDoneList = {};
            for i=0, weaponParts:size() - 1 do
				--print("Leatherdad Test 3")
                local part = weaponParts:get(i);
                if part:getMountOn():contains(isWeapon:getFullType()) and not alreadyDoneList[part:getName()] then
					--print("Leatherdad Test 4")
                    if (part:getPartType() == "Scope") and not isWeapon:getScope() then
                        addOption = true;
                    elseif (part:getPartType() == "Clip") and not isWeapon:getClip() then
                        addOption = true;
                    elseif (part:getPartType() == "Sling") and not isWeapon:getSling() then
                        addOption = true;
                    elseif (part:getPartType() == "Stock") and not isWeapon:getStock() then
                        addOption = true;
                    elseif (part:getPartType() == "Canon") and not isWeapon:getCanon() then
                        addOption = true;
                    elseif (part:getPartType() == "RecoilPad") and not isWeapon:getRecoilpad() then
                        addOption = true;
                    end
                end
                if addOption then
					--print("Leatherdad Test 5")
                    doIt = true;
                    subMenuUp:addOption(weaponParts:get(i):getName(), isWeapon, ISInventoryPaneContextMenu.onUpgradeWeapon, part, getSpecificPlayer(player));
                    addOption = false;
                    alreadyDoneList[part:getName()] = true;
                end
            end
            if doIt then
				--print("Leatherdad Test 6")
                local upgradeOption = context:addOption(getText("ContextMenu_Add_Weapon_Upgrade"), items, nil);
                context:addSubMenu(upgradeOption, subMenuUp);
            end
        end
        -- remove parts
        if  getSpecificPlayer(player):getInventory():getItemFromType("Multitool")
		and not getSpecificPlayer(player):getInventory():getItemFromType("Screwdriver")
		and (isWeapon:getScope() or isWeapon:getClip() or isWeapon:getSling() or isWeapon:getStock() or isWeapon:getCanon() or isWeapon:getRecoilpad()) then
            local removeUpgradeOption = context:addOption(getText("ContextMenu_Remove_Weapon_Upgrade"), items, nil);
            local subMenuRemove = context:getNew(context);
            context:addSubMenu(removeUpgradeOption, subMenuRemove);
            if isWeapon:getScope() then
                subMenuRemove:addOption(isWeapon:getScope():getName(), isWeapon, ISInventoryPaneContextMenu.onRemoveUpgradeWeapon, isWeapon:getScope(), getSpecificPlayer(player));
            end
            if isWeapon:getClip() then
                subMenuRemove:addOption(isWeapon:getClip():getName(), isWeapon, ISInventoryPaneContextMenu.onRemoveUpgradeWeapon, isWeapon:getClip(), getSpecificPlayer(player));
            end
            if isWeapon:getSling() then
                subMenuRemove:addOption(isWeapon:getSling():getName(), isWeapon, ISInventoryPaneContextMenu.onRemoveUpgradeWeapon, isWeapon:getSling(), getSpecificPlayer(player));
            end
            if isWeapon:getStock() then
                subMenuRemove:addOption(isWeapon:getStock():getName(), isWeapon, ISInventoryPaneContextMenu.onRemoveUpgradeWeapon, isWeapon:getStock(), getSpecificPlayer(player));
            end
            if isWeapon:getCanon() then
                subMenuRemove:addOption(isWeapon:getCanon():getName(), isWeapon, ISInventoryPaneContextMenu.onRemoveUpgradeWeapon, isWeapon:getCanon(), getSpecificPlayer(player));
            end
            if isWeapon:getRecoilpad() then
                subMenuRemove:addOption(isWeapon:getRecoilpad():getName(), isWeapon, ISInventoryPaneContextMenu.onRemoveUpgradeWeapon, isWeapon:getRecoilpad(), getSpecificPlayer(player));
            end
        end
    end


    return context;


end
ISInventoryPaneContextMenu.onUpgradeWeapon = function(weapon, part, player)
    ISInventoryPaneContextMenu.transferIfNeeded(player, weapon)
    ISInventoryPaneContextMenu.transferIfNeeded(player, part)
    if player:getInventory():contains("Screwdriver") then
        ISInventoryPaneContextMenu.equipWeapon(part, false, false, player:getPlayerNum());
        ISInventoryPaneContextMenu.equipWeapon(player:getInventory():getItemFromType("Screwdriver"), true, false, player:getPlayerNum());
        ISTimedActionQueue.add(ISUpgradeWeapon:new(player, weapon, part, 50));
    elseif player:getInventory():contains("Multitool") then
        ISInventoryPaneContextMenu.equipWeapon(part, false, false, player:getPlayerNum());
        ISInventoryPaneContextMenu.equipWeapon(player:getInventory():getItemFromType("Multitool"), true, false, player:getPlayerNum());
        ISTimedActionQueue.add(ISUpgradeWeapon:new(player, weapon, part, 50));
    end
end


Events.OnFillInventoryObjectContextMenu.Add(Leatherdad_WeaponAttachments)	