function UseElevator2 (player, context, worldobjects, test)
    local playerObj = getSpecificPlayer(player)
	local CustomName = nil
	local GroupName = nil
	local SpriteName = nil
	local Elevator = nil
	local jukebox = nil
	local power = nil
	local water = nil
	local devicePower = nil
	local ElevatorExit = nil
	local PipeExit = nil
	local ManholeExit = nil
	local	LadderExit = nil
	if (getGameTime():getNightsSurvived() < getSandboxOptions():getElecShutModifier()) then
		power = true
	end	
	for x in pairs(worldobjects) do
		if worldobjects[x]:getProperties() then
		
	--local sourceGrid = worldobjects[x]:getSquare():getSourceGrid()
	-- local sourceGrid = worldobjects[x]:getSquare()
	-- local zoneType = sourceGrid:getZoneType()
	-- print(tostring(zoneType))
		
		
		
			--print(tostring(worldobjects[x]))
			
			--print(tostring(worldobjects[x]:getSprite():getName()))
			if (worldobjects[x]:getSprite():getName()) then
				SpriteName = worldobjects[x]:getSprite():getName()
				print("Name: " .. tostring(SpriteName))
				if SpriteName:contains("sewing") then					
					--worldobjects[x]:setName("Sewing Machine");
				end
				-- if worldobjects[x]:getSprite():getName() == "fixtures_escalators_01_56" then
					-- print("Elevator Console!")
					-- Elevator = worldobjects[x]
				-- end
				local area = nil
				local xx = worldobjects[x]:getSquare():getX()
				local yy = worldobjects[x]:getSquare():getY()
				--print(tostring(xx))
				--print(tostring(yy))
				if xx == 5542 and (yy==12502 or yy == 12503 ) then
					area = true
				end
				
				
				
				if worldobjects[x]:getSprite():getName() == "fixtures_escalators_01_48" and area == true then
					--print("Elevator Door!")
					Elevator = worldobjects[x]
				end
				if worldobjects[x]:getSprite():getName() == "fixtures_escalators_01_49" and area == true then
					--print("Elevator Door!")
					Elevator = worldobjects[x]
				end
			end
			if worldobjects[x]:getProperties():Val("CustomName") then
				--print(worldobjects[x]:getProperties():Val("CustomName"))
				CustomName = worldobjects[x]:getProperties():Val("CustomName")
			end
			if worldobjects[x]:getProperties():Val("GroupName") then
				--print(worldobjects[x]:getProperties():Val("GroupName"))
				 GroupName = worldobjects[x]:getProperties():Val("GroupName")
			end
			if worldobjects[x]:getSprite():getProperties():Val("ID") then
				--print(worldobjects[x]:getSprite():getProperties():Val("ID"))
				 GroupName = worldobjects[x]:getSprite():getProperties():Val("ID")
			end
		end
		
		
				
		if isLabsAlpha(playerObj) and SpriteName then
			if SpriteName == "fixtures_escalators_01_48" or SpriteName == "fixtures_escalators_01_49" then
				ElevatorExit = worldobjects[x]
			end
			if SpriteName == "location_sewer_01_38" or SpriteName == "location_sewer_01_39" then
				PipeExit = worldobjects[x]
			end
			if SpriteName =="street_decoration_01_15" then
				ManholeExit = worldobjects[x]
			end
			if SpriteName == "location_sewer_01_33" or SpriteName == "location_sewer_01_34" then
				LadderExit = worldobjects[x]
			end
		
		end
		
		
		
		
		if CustomName == "Jukebox" then
			jukebox = worldobjects[x]
			local x = jukebox:getX()
			local y = jukebox:getY()
			local z = jukebox:getZ()
			local square = getCell():getGridSquare( x, y, z)
			local square = jukebox:getSquare()
			if (getGameTime():getNightsSurvived() < getSandboxOptions():getElecShutModifier())
			and not square:isOutside() then
				power = true
			end	
			if square:haveElectricity() then			
				devicePower = true
			end
		end
	end	

	local keycard = nil
	--if playerObj:getInventory():contains("LabKeycard") then keycard = true end
	if playerObj:getInventory():getFirstType("LabKeycard") then keycard = true end
	if Elevator and keycard then -- and (power or devicePower) then
		--Lemon-lime. Cherry. Cola.
		--context:addOption(getText("Use Lab Keycard")) --, worldobjects, playJukebox, jukebox, player, "FastAndLoose");
		context:addOption(getText("Use Lab Keycard"), Elevator, useKeycard, playerObj)

	end
	if ElevatorExit then
		context:addOption(getText("The Elevator Doesn't Appear To Be Working"))--, Elevator, useKeycard, playerObj)
	end
	if PipeExit then
		context:addOption(getText("Exit Through Sewer Pipe"))--, Elevator, useKeycard, playerObj)
	end
	if ManholeExit then
		context:addOption(getText("Exit Through Manhole"))--, Elevator, useKeycard, playerObj)
	end
	if LadderExit then
		context:addOption(getText("Climb Ladder to Exit"))--, Elevator, useKeycard, playerObj)
	end
end

function useKeycard(Elevator, playerObj)
	if not Elevator:getSquare() or not luautils.walkAdj(playerObj, Elevator:getSquare(), true) then
		return
	end
	if playerObj:getSecondaryHandItem()
	and playerObj:getSecondaryHandItem() == playerObj:getPrimaryHandItem()
	then
		playerObj:setSecondaryHandItem(nil)
	end
	local card = playerObj:getInventory():getFirstType("LabKeycard")
	playerObj:setPrimaryHandItem(card)
	--print("KEYCARD")
	ISTimedActionQueue.add(UseKeycardAction:new(playerObj, card, Elevator, 100))
end
	
function isLabsAlpha (player)
		local xx = player:getX()
		local yy = player:getY()
		local lowX = 5400
		local highX = 5699
		local lowY = 42300
		local highY = 42599
		if xx >= lowX and xx <= highX then
			--print("x is acceptable")
			if yy >= lowY and yy <= highY then
				--print("y is acceptable")
				return true
			end
		end
		return false
end